# Multi-stage Dockerfile for FVI Analytics Platform
FROM python:3.12-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements
COPY requirements-phase2.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements-phase2.txt

# Development stage
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir \
    jupyter \
    ipython \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    flake8 \
    mypy

# Copy source code
COPY . .

# Expose ports
EXPOSE 8000 8888

# Default command for development
CMD ["uvicorn", "src.ml.inference_service:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

# Copy source code
COPY . .

# Create non-root user
RUN groupadd -r fvi && useradd -r -g fvi fvi
RUN chown -R fvi:fvi /app
USER fvi

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production command
CMD ["gunicorn", "src.ml.inference_service:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]

# ML Training stage
FROM base as training

# Install additional ML dependencies
RUN pip install --no-cache-dir \
    mlflow \
    optuna \
    lightgbm \
    pymc \
    arviz

# Copy source code
COPY . .

# Create directories for MLflow
RUN mkdir -p /app/mlruns /app/models

# Expose MLflow port
EXPOSE 5000

# Training command
CMD ["python", "-m", "src.ml.training_pipeline"]

# Vector-RAG Service stage
FROM base as vector-rag

# Install NLP dependencies
RUN pip install --no-cache-dir \
    sentence-transformers \
    openai \
    langchain \
    tiktoken

# Copy source code
COPY . .

# Expose port
EXPOSE 8001

# Vector-RAG command
CMD ["uvicorn", "src.llm.vector_rag:app", "--host", "0.0.0.0", "--port", "8001"]

# dbt stage
FROM base as dbt

# Install dbt
RUN pip install --no-cache-dir \
    dbt-core \
    dbt-postgres \
    dbt-utils

# Copy dbt project
COPY dbt/ /app/dbt/
WORKDIR /app/dbt

# dbt command
CMD ["dbt", "run"]

# Scheduler stage
FROM base as scheduler

# Install scheduling dependencies
RUN pip install --no-cache-dir \
    celery \
    redis

# Copy source code
COPY . .

# Scheduler command
CMD ["celery", "-A", "src.scheduler.celery_app", "worker", "--loglevel=info"]
